definitions:
  models.Category:
    properties:
      Category_name:
        example: Lavash
        type: string
      Description:
        example: Qaynoq va mazali Lavash
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
    required:
    - Category_name
    - Description
    type: object
  models.Client:
    properties:
      address:
        example: wall street
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      firstname:
        example: John
        type: string
      id:
        type: string
      lastname:
        example: Doe
        type: string
      password:
        example: client
        type: string
      phoneNumber:
        example: "998797456321"
        type: string
      type:
        example: client
        type: string
      updated_at:
        type: string
      username:
        example: Jdoe002
        type: string
    required:
    - address
    - firstname
    - lastname
    - password
    - phoneNumber
    - type
    - username
    type: object
  models.CreateCategoryModul:
    properties:
      Category_name:
        example: Lavash
        type: string
      Description:
        example: Qaynoq va mazali Lavash
        type: string
    required:
    - Category_name
    - Description
    type: object
  models.CreateClientModul:
    properties:
      address:
        example: wall street
        type: string
      firstname:
        example: John
        type: string
      lastname:
        example: Doe
        type: string
      password:
        example: client
        type: string
      phoneNumber:
        example: "998797456321"
        type: string
      type:
        example: client
        type: string
      username:
        example: Jdoe002
        type: string
    required:
    - address
    - firstname
    - lastname
    - password
    - phoneNumber
    - type
    - username
    type: object
  models.CreateOrderItemModul:
    properties:
      client_fullname:
        example: uuid
        type: string
      client_id:
        example: uuid
        type: string
      productName:
        example: Lavash
        type: string
      totalPrice:
        example: uuid
        type: string
    required:
    - client_fullname
    - client_id
    - productName
    - totalPrice
    type: object
  models.CreateOrderModul:
    properties:
      client_id:
        example: uuid
        type: string
      count:
        example: "2"
        type: string
      product_id:
        example: uuid
        type: string
    required:
    - client_id
    - count
    - product_id
    type: object
  models.CreateProductModul:
    properties:
      category_id:
        type: string
      description:
        type: string
      price:
        type: string
      product_name:
        type: string
    required:
    - category_id
    - description
    - price
    - product_name
    type: object
  models.JSONErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.JSONResult:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.LoginModul:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Order:
    properties:
      client_id:
        example: uuid
        type: string
      count:
        example: "2"
        type: string
      created_at:
        type: string
      id:
        type: string
      product_id:
        example: uuid
        type: string
      updated_at:
        type: string
    required:
    - client_id
    - count
    - product_id
    type: object
  models.OrderItem:
    properties:
      client_fullname:
        example: John Doe
        type: string
      client_id:
        example: uuid
        type: string
      created_at:
        type: string
      id:
        type: string
      productName:
        example: Lavash
        type: string
      totalPrice:
        example: uuid
        type: string
      updated_at:
        type: string
    required:
    - client_fullname
    - client_id
    - productName
    - totalPrice
    type: object
  models.Product:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      price:
        type: string
      product_name:
        type: string
      updated_at:
        type: string
    required:
    - category_id
    - description
    - price
    - product_name
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdateCategoryModul:
    properties:
      Category_name:
        example: Lavash
        type: string
      Description:
        example: Qaynoq va mazali Lavash
        type: string
      id:
        type: string
    required:
    - Category_name
    - Description
    - id
    type: object
  models.UpdateClientModul:
    properties:
      address:
        example: wall street
        type: string
      id:
        type: string
      password:
        example: client
        type: string
      phoneNumber:
        example: "998797456321"
        type: string
    required:
    - address
    - password
    - phoneNumber
    type: object
  models.UpdateOrderModul:
    properties:
      count:
        example: "2"
        type: string
      id:
        type: string
    required:
    - count
    - id
    type: object
  models.UpdateProductModul:
    properties:
      description:
        type: string
      id:
        type: string
      price:
        type: string
    required:
    - description
    - price
    type: object
info:
  contact: {}
paths:
  /v1/category:
    post:
      consumes:
      - application/json
      description: Creat a new category
      parameters:
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Creat Category
      tags:
      - category
  /v1/category/:
    get:
      consumes:
      - application/json
      description: GetCategoryList
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "100"
        in: query
        name: limit
        type: integer
      - description: search exapmle
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Category'
                  type: array
              type: object
      summary: List categorys
      tags:
      - category
    put:
      consumes:
      - application/json
      description: Update Category
      parameters:
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update Category
      tags:
      - category
  /v1/category/{id}:
    delete:
      consumes:
      - application/json
      description: get element by id and delete this category
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete Category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: get an category by id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: GetCategoryByID
      tags:
      - category
  /v1/client:
    post:
      consumes:
      - application/json
      description: Creat a new client
      parameters:
      - description: Client body
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/models.CreateClientModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Client'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Creat Client
      tags:
      - client
  /v1/client/:
    get:
      consumes:
      - application/json
      description: GetClientList
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "100"
        in: query
        name: limit
        type: integer
      - description: search exapmle
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Client'
                  type: array
              type: object
      summary: List clients
      tags:
      - client
    put:
      consumes:
      - application/json
      description: Update Client
      parameters:
      - description: Client body
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/models.UpdateClientModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Client'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update Client
      tags:
      - client
  /v1/client/{id}:
    delete:
      consumes:
      - application/json
      description: get element by id and delete this client
      parameters:
      - description: Client id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Client'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete Client
      tags:
      - client
    get:
      consumes:
      - application/json
      description: get an client by id
      parameters:
      - description: Client id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Client'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: GetClientByID
      tags:
      - client
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login body
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/models.LoginModul'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Login
      tags:
      - client
  /v1/my-products/:
    get:
      consumes:
      - application/json
      description: SearchProductByMyUsername
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "100"
        in: query
        name: limit
        type: integer
      - default: ""
        description: s
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
      summary: List products
      tags:
      - product
  /v1/order:
    post:
      consumes:
      - application/json
      description: Creat a new order
      parameters:
      - description: Order body
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Creat Order
      tags:
      - order
  /v1/order/:
    get:
      consumes:
      - application/json
      description: GetOrderList
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "100"
        in: query
        name: limit
        type: integer
      - description: search exapmle
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
      summary: List orders
      tags:
      - order
    put:
      consumes:
      - application/json
      description: Update Order
      parameters:
      - description: Order body
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update Order
      tags:
      - order
  /v1/order/{id}:
    delete:
      consumes:
      - application/json
      description: get element by id and delete this order
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete Order
      tags:
      - order
    get:
      consumes:
      - application/json
      description: get an order by id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: GetOrderByID
      tags:
      - order
  /v1/orderItem:
    post:
      consumes:
      - application/json
      description: Creat a new orderItem
      parameters:
      - description: OrderItem body
        in: body
        name: orderItem
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderItemModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Creat OrderItem
      tags:
      - orderItem
  /v1/orderItem/:
    get:
      consumes:
      - application/json
      description: GetOrderItemList
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "100"
        in: query
        name: limit
        type: integer
      - description: search exapmle
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.OrderItem'
                  type: array
              type: object
      summary: List orderItems
      tags:
      - orderItem
  /v1/orderItem/{id}:
    delete:
      consumes:
      - application/json
      description: get element by id and delete this orderItem
      parameters:
      - description: OrderItem id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete OrderItem
      tags:
      - orderItem
    get:
      consumes:
      - application/json
      description: get an orderItem by id
      parameters:
      - description: OrderItem id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: GetOrderItemByID
      tags:
      - orderItem
  /v1/product:
    post:
      consumes:
      - application/json
      description: Creat a new product
      parameters:
      - description: Product body
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Creat Product
      tags:
      - product
  /v1/product/:
    get:
      consumes:
      - application/json
      description: GetProductList
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "100"
        in: query
        name: limit
        type: integer
      - default: ""
        description: search
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
      summary: List products
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update Product
      parameters:
      - description: Product body
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductModul'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update Product
      tags:
      - product
  /v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: get element by id and delete this product
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete Product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: get an product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: GetProductByID
      tags:
      - product
swagger: "2.0"
